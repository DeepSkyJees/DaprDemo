apiVersion: apps/v1
kind: Deployment
metadata:
  name: daprfront
  labels:
    app: daprfront
spec:
  selector:
    matchLabels:
      app: daprfront
  replicas: 1
  template:
    metadata:
      name: daprfront
      labels:
        app: daprfront
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "daprfront"
        dapr.io/app-port: "80"
        dapr.io/sidecar-liveness-probe-delay-seconds: "10"
        dapr.io/sidecar-readiness-probe-delay-seconds: "10"
        dapr.io/log-as-json: "true"
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
        # sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: daprfront
      containers:
        - name: daprfront
          image: secondgalaxy/nigeldaprfrontapi:1.1.2
          imagePullPolicy: Always #IfNotPresent
          ports:
          # Define the ASP.NET Core ports
          - containerPort: 80
          - containerPort: 443
          env:
          # The Azure Storage connection string for clustering is injected as an environment variable
          # It must be created separately using a command such as:
          # > kubectl create secret generic az-storage-acct --from-file=key=./az-storage-acct.txt
          #- name: STORAGE_CONNECTION_STRING
          #  valueFrom:
          #    secretKeyRef:
          #      name: az-storage-acct
          #      key: key
          # Configure settings to let Orleans know which cluster it belongs to and which pod it is running in
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: DOTNET_SHUTDOWNTIMEOUTSECONDS
            value: "120"
          - name: REDIS
            value: "redis" # The name of the redis service 
      terminationGracePeriodSeconds: 180
      imagePullSecrets:
        - name: registry-jees
  minReadySeconds: 60
  strategy:
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1

---
# In order to be able to access the service from outside the cluster, we will need to add a Service object
apiVersion: v1
kind: Service
metadata:
  name: daprfront  
  labels:
    app: daprfront
    service: daprfront
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 32040
    name: http
  selector:
    app: daprfront


---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: daprfront
  labels:
    account: daprfront